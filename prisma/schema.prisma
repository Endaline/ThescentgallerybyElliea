// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  phone            String?
  name             String?
  emailVerified    DateTime?
  image            String?
  password         String?
  role             String    @default("user")
  address          Json?     @db.Json
  paymentMethod    String?
  createdAt        DateTime  @default(now()) @db.Timestamp
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  otp              OTP[]
  session          Session[]
  Order            Order[]
  Review           Review[]
  Cart             Cart[]
  Account          Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @id @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now()) @db.Timestamp
  updatedAt    DateTime @updatedAt @db.Timestamp
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  url  String
  name String
  key  String
}

model Product {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String       @unique(map: "product_slug_idx")
  description      String
  shortDescription String?
  concentration    String?
  sku              String?
  status           String       @default("active")
  featured         Boolean      @default(false)
  limitedEdition   Boolean      @default(false)
  newArrival       Boolean      @default(false)
  price            Float        @default(0)
  originalPrice    Float?
  stock            Int
  volume           String?
  weight           String?
  dimensions       String?
  longevity        String?
  sillage          String?
  topNotes         String[]
  middleNotes      String[]
  baseNotes        String[]
  images           Json[]
  createdAt        DateTime     @default(now()) @db.Timestamp
  updatedAt        DateTime     @updatedAt
  brandId          String       @db.ObjectId
  brand            ProductBrand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  OrderItem OrderItem[]
  Review    Review[]
}

model Cart {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?  @db.ObjectId
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Float    @default(0)
  totalPrice    Float    @default(0)
  shippingPrice Float    @default(0)
  taxPrice      Float    @default(0)
  createdAt     DateTime @default(now()) @db.Timestamp
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductBrand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  createdAt DateTime  @default(now()) @db.Timestamp
  Products  Product[]
}

model Shipping {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  shippingRate Float
  taxRate      Float
  createdAt    DateTime @default(now()) @db.Timestamp
}

model CompanyInfo {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  storeName        String?
  address          String?
  phone            String?
  contactEmail     String?
  storeDescription String?
  supportEmail     String?
  createdAt        DateTime @default(now()) @db.Timestamp
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Float       @default(0)
  shippingPrice   Float       @default(0)
  taxPrice        Float       @default(0)
  totalPrice      Float       @default(0)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp
  createdAt       DateTime    @default(now()) @db.Timestamp
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems      OrderItem[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  qty       Int
  price     Float   @default(0)
  name      String
  slug      String
  imageId   String?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
}

model Review {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  productId          String   @db.ObjectId
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
